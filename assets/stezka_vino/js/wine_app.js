/* ======================================
   WINE APP - Vinn√Ω kv√≠zov√Ω syst√©m a gamifikace
   Specifick√Ω modul pro vina≈ôskou stezku
   ====================================== */

// === GLOB√ÅLN√ç PROMƒöNN√â ===
let gamificationInitialized = false;
let currentExpositionId = 'stezka_vino';
let currentSceneId = '/assets/stezka_vino/stezka.html';

// Kv√≠zov√Ω syst√©m
const QUIZ_DISTANCE_STEP = 50; // ka≈æd√Ωch 50m
let lastQuizMilestone = -1;
let currentQuiz = null;

// === VINN√â KV√çZY DATA ===

// 20 vina≈ôsk√Ωch kv√≠z≈Ø s fakty
const WINE_QUIZZES = [
    {
        question: "üçá Kolik hrozn≈Ø je pot≈ôeba na jednu l√°hev v√≠na?",
        answers: ["A) 300 hrozn≈Ø", "B) 600 hrozn≈Ø", "C) 1200 hrozn≈Ø"],
        correct: 1,
        explanation: "Na jednu l√°hev v√≠na (0,75l) je pot≈ôeba p≈ôibli≈ænƒõ 600 hrozn≈Ø! To odpov√≠d√° zhruba 1,2-1,5 kg hrozn≈Ø."
    },
    {
        question: "üç∑ Kolik druh≈Ø v√≠na existuje na svƒõtƒõ?",
        answers: ["A) 1000 druh≈Ø", "B) 5000 druh≈Ø", "C) 10000 druh≈Ø"],
        correct: 2,
        explanation: "Na svƒõtƒõ existuje p≈ôes 10 000 r≈Øzn√Ωch odr≈Ød vinn√© r√©vy! Komerƒçnƒõ se v≈°ak pƒõstuje jen asi 1000 z nich."
    },
    {
        question: "üåç Kter√° zemƒõ je nejvƒõt≈°√≠m producentem v√≠na?",
        answers: ["A) Francie", "B) It√°lie", "C) ≈†panƒõlsko"],
        correct: 1,
        explanation: "It√°lie je nejvƒõt≈°√≠m producentem v√≠na na svƒõtƒõ! N√°sleduje ji Francie a ≈†panƒõlsko."
    },
    {
        question: "üçæ Kolik bublin obsahuje pr≈Ømƒõrn√° l√°hev ≈°ampa≈àsk√©ho?",
        answers: ["A) 10 milion≈Ø", "B) 49 milion≈Ø", "C) 100 milion≈Ø"],
        correct: 1,
        explanation: "Pr≈Ømƒõrn√° l√°hev ≈°ampa≈àsk√©ho obsahuje p≈ôibli≈ænƒõ 49 milion≈Ø bublin! Vznikaj√≠ p≈ôi druh√© fermentaci."
    },
    {
        question: "üå°Ô∏è P≈ôi jak√© teplotƒõ se pod√°v√° ƒçerven√© v√≠no?",
        answers: ["A) 12-14¬∞C", "B) 16-18¬∞C", "C) 20-22¬∞C"],
        correct: 1,
        explanation: "ƒåerven√© v√≠no se ide√°lnƒõ pod√°v√° p≈ôi teplotƒõ 16-18¬∞C. P≈ô√≠li≈° tepl√© v√≠no ztr√°c√≠ svou eleganci."
    },
    {
        question: "üè∫ Kolik let m≈Ø≈æe v√≠no zr√°t v sudu?",
        answers: ["A) 1-2 roky", "B) 3-5 let", "C) 10-20 let"],
        correct: 1,
        explanation: "Kvalitn√≠ v√≠no m≈Ø≈æe zr√°t v dubov√Ωch sudech 3-5 let, v√Ωjimeƒçn√° v√≠na i d√©le. Kr√°tk√© zr√°n√≠ je 6-12 mƒõs√≠c≈Ø."
    },
    {
        question: "üçá Kolik kilogram≈Ø hrozn≈Ø vyroste na jedn√© r√©vƒõ?",
        answers: ["A) 2-3 kg", "B) 5-8 kg", "C) 10-15 kg"],
        correct: 1,
        explanation: "Jedna vinn√° r√©va vyprodukuje pr≈Ømƒõrnƒõ 5-8 kg hrozn≈Ø roƒçnƒõ! To staƒç√≠ na 3-6 lahv√≠ v√≠na."
    },
    {
        question: "üåø Kolik let m≈Ø≈æe ≈æ√≠t vinn√° r√©va?",
        answers: ["A) 30 let", "B) 60 let", "C) 100+ let"],
        correct: 2,
        explanation: "Vinn√° r√©va m≈Ø≈æe ≈æ√≠t p≈ôes 100 let! Nejstar≈°√≠ r√©vy na svƒõtƒõ maj√≠ dokonce p≈ôes 400 let."
    },
    {
        question: "üíé Kolik obsahuje v√≠no antioxidant≈Ø?",
        answers: ["A) 200 slouƒçenin", "B) 500 slouƒçenin", "C) 1000 slouƒçenin"],
        correct: 2,
        explanation: "V√≠no obsahuje p≈ôes 1000 r≈Øzn√Ωch chemick√Ωch slouƒçenin! ƒåerven√© v√≠no m√° v√≠ce antioxidant≈Ø ne≈æ b√≠l√©."
    },
    {
        question: "üîç Jak pozn√°me kvalitu v√≠na podle barvy?",
        answers: ["A) Podle intenzity", "B) Podle ƒçirosti", "C) Podle oboj√≠ho"],
        correct: 2,
        explanation: "Kvalita v√≠na se pozn√° podle ƒçirosti a intenzity barvy. Kaln√© v√≠no nebo v√≠no s hnƒõd√Ωm n√°dechem m≈Ø≈æe b√Ωt vadn√©."
    },
    {
        question: "üå°Ô∏è P≈ôi jak√© teplotƒõ fermentuje b√≠l√© v√≠no?",
        answers: ["A) 10-15¬∞C", "B) 15-20¬∞C", "C) 20-25¬∞C"],
        correct: 1,
        explanation: "B√≠l√© v√≠no fermentuje p≈ôi ni≈æ≈°√≠ teplotƒõ 15-20¬∞C pro zachov√°n√≠ svƒõ≈æ√≠ch arom√°t. ƒåerven√© p≈ôi 25-30¬∞C."
    },
    {
        question: "üëÉ Kolik r≈Øzn√Ωch v≈Øn√≠ lze rozpoznat ve v√≠nƒõ?",
        answers: ["A) 50 v≈Øn√≠", "B) 200 v≈Øn√≠", "C) 500 v≈Øn√≠"],
        correct: 2,
        explanation: "Ve v√≠nƒõ lze rozpoznat p≈ôes 500 r≈Øzn√Ωch aromat! Profesion√°ln√≠ someli√©≈ôi jich dok√°≈æ√≠ identifikovat stovky."
    },
    {
        question: "üç∑ Kolik procent alkoholu m√° pr≈Ømƒõrn√© v√≠no?",
        answers: ["A) 8-10%", "B) 11-14%", "C) 15-18%"],
        correct: 1,
        explanation: "Pr≈Ømƒõrn√© v√≠no m√° 11-14% alkoholu. Lehk√° v√≠na maj√≠ 8-11%, siln√° v√≠na a≈æ 15-16%."
    },
    {
        question: "üåû Kolik sluneƒçn√Ωch hodin pot≈ôebuje r√©va za rok?",
        answers: ["A) 800 hodin", "B) 1300 hodin", "C) 2000 hodin"],
        correct: 1,
        explanation: "Vinn√° r√©va pot≈ôebuje minim√°lnƒõ 1300 sluneƒçn√≠ch hodin roƒçnƒõ pro kvalitn√≠ dozr√°n√≠ hrozn≈Ø!"
    },
    {
        question: "üçæ Jak dlouho se uchov√°v√° otev≈ôen√© v√≠no?",
        answers: ["A) 1 den", "B) 3-5 dn√≠", "C) 2 t√Ωdny"],
        correct: 1,
        explanation: "Otev≈ôen√© v√≠no se uchov√°v√° 3-5 dn√≠ v lednici. ƒåerven√© vydr≈æ√≠ o nƒõco d√©le ne≈æ b√≠l√©."
    },
    {
        question: "üè∫ Z jak√©ho materi√°lu jsou nejlep≈°√≠ vinn√© sudy?",
        answers: ["A) Ak√°cie", "B) Dubu", "C) Ka≈°tanu"],
        correct: 1,
        explanation: "Nejlep≈°√≠ vinn√© sudy jsou z dubu! Dubov√© d≈ôevo dod√°v√° v√≠nu komplexn√≠ chutƒõ a umo≈æ≈àuje ≈ô√≠zenou oxidaci."
    },
    {
        question: "üí™ Kolik kilogram≈Ø hrozn≈Ø unese sbƒõraƒç za den?",
        answers: ["A) 50 kg", "B) 200 kg", "C) 500 kg"],
        correct: 1,
        explanation: "Zku≈°en√Ω sbƒõraƒç hrozn≈Ø dok√°≈æe za den nasb√≠rat 200-300 kg hrozn≈Ø! Ruƒçn√≠ sbƒõr je st√°le nej≈°etrnƒõj≈°√≠ metoda."
    },
    {
        question: "üõ°Ô∏è Co je sulfitan ve v√≠nƒõ?",
        answers: ["A) Konzervant", "B) Barvivo", "C) Chu≈•ov√° p≈ô√≠sada"],
        correct: 0,
        explanation: "Sulfitany jsou p≈ô√≠rodn√≠ konzervant, kter√Ω br√°n√≠ oxidaci a r≈Østu bakteri√≠. Jsou ve v√≠nƒõ p≈ôirozenƒõ i umƒõle."
    },
    {
        question: "‚è∞ Kdy se hrozny skl√≠z√≠ nejl√©pe?",
        answers: ["A) R√°no", "B) Poledne", "C) Veƒçer"],
        correct: 0,
        explanation: "Hrozny se nejl√©pe skl√≠z√≠ ƒçasnƒõ r√°no, kdy jsou chladn√© a obsahuj√≠ nejv√≠ce kyselin a arom√°t."
    },
    {
        question: "üåô Jak dlouho trv√° vinifikace?",
        answers: ["A) 1 t√Ωden", "B) 1 mƒõs√≠c", "C) 3-6 mƒõs√≠c≈Ø"],
        correct: 2,
        explanation: "Cel√° vinifikace trv√° 3-6 mƒõs√≠c≈Ø! Samotn√° fermentace 1-3 t√Ωdny, pak n√°sleduje dozr√°v√°n√≠ a le≈æen√≠."
    }
];

// === KV√çZOV√ù SYST√âM ===

/**
 * Z√≠sk√° seznam dokonƒçen√Ωch kv√≠z≈Ø z localStorage
 * @returns {Array} Array index≈Ø dokonƒçen√Ωch kv√≠z≈Ø
 */
function getCompletedQuizzes() {
    const completed = localStorage.getItem('wineQuizzesCompleted');
    return completed ? JSON.parse(completed) : [];
}

/**
 * Oznaƒç√≠ kv√≠z jako dokonƒçen√Ω a zkontroluje achievement
 * @param {number} quizIndex - Index dokonƒçen√©ho kv√≠zu
 */
function markQuizCompleted(quizIndex) {
    const completed = getCompletedQuizzes();
    console.log(`üçá markQuizCompleted called for quiz ${quizIndex}`);
    console.log(`üìä Current completed: ${completed.length}/${WINE_QUIZZES.length}`);
    
    // P≈ôidej kv√≠z, pokud nen√≠ dokonƒçen√Ω
    if (!completed.includes(quizIndex)) {
        completed.push(quizIndex);
        localStorage.setItem('wineQuizzesCompleted', JSON.stringify(completed));
        console.log(`‚úÖ Quiz ${quizIndex} added. New total: ${completed.length}/${WINE_QUIZZES.length}`);
    } else {
        console.log(`‚ÑπÔ∏è Quiz ${quizIndex} already completed`);
    }
    
    // Kontrola achievementu - v≈ædy se zkontroluje
    const finalCompleted = getCompletedQuizzes();
    
    if (finalCompleted.length === WINE_QUIZZES.length) {
        console.log('üèÜ All 20 quizzes completed! Activating quiz achievement...');
        
        // Zkontroluj, zda u≈æ nen√≠ achievement odemƒçen√Ω
        if (typeof isAchievementUnlocked === 'function' && isAchievementUnlocked('wine_quiz_master')) {
            console.log('‚ÑπÔ∏è wine_quiz_master already unlocked');
            return;
        }
        
        // Aktivuj achievement p≈ô√≠mo
        if (typeof unlockAchievement === 'function') {
            const success = unlockAchievement('wine_quiz_master');
            console.log('‚úÖ unlockAchievement result:', success);
            
            if (success) {
                console.log('üéâ Kv√≠zov√Ω achievement √∫spƒõ≈°nƒõ aktivov√°n!');
            }
        } else {
            console.error("‚ùå unlockAchievement function not found");
        }
    } else {
        console.log(`üìà Progress: ${finalCompleted.length}/${WINE_QUIZZES.length} quizzes completed`);
    }
}

/**
 * Z√≠sk√° n√°hodn√Ω nedokonƒçen√Ω kv√≠z
 * @returns {Object|null} Objekt s kv√≠zem a jeho indexem nebo null
 */
function getRandomUncompletedQuiz() {
    const completed = getCompletedQuizzes();
    const available = WINE_QUIZZES.map((_, index) => index).filter(index => !completed.includes(index));
    
    if (available.length === 0) {
        console.log('üçá All quizzes completed!');
        return null;
    }
    
    const randomIndex = available[Math.floor(Math.random() * available.length)];
    return { quiz: WINE_QUIZZES[randomIndex], index: randomIndex };
}

/**
 * Zkontroluje vzd√°lenost od startu a zobraz√≠ kv√≠z pokud je pot≈ôeba
 */
function checkDistanceForQuiz() {
    // Z√°vislost na CoreUtils
    const userPos = window.CoreUtils ? window.CoreUtils.getUserPosition() : null;
    const startPos = window.CoreUtils ? window.CoreUtils.getStartPosition() : null;
    
    if (!userPos || !startPos) {
        return;
    }
    
    // Vypoƒç√≠tej vzd√°lenost od startu
    const distanceFromStart = window.CoreUtils.calculateDistance(
        startPos.lat, startPos.lng,
        userPos.lat, userPos.lng
    );
    
    // Zjisti, na kter√©m miln√≠ku jsme
    const currentMilestone = Math.floor(distanceFromStart / QUIZ_DISTANCE_STEP);
    
    console.log(`üéØ Distance from start: ${distanceFromStart.toFixed(1)}m, milestone: ${currentMilestone}, last quiz milestone: ${lastQuizMilestone}`);
    
    // Pokud jsme na nov√©m miln√≠ku a je≈°tƒõ jsme tu kv√≠z nezobrazili
    if (currentMilestone > lastQuizMilestone && currentMilestone > 0) {
        console.log(`üéØ New milestone reached: ${currentMilestone * QUIZ_DISTANCE_STEP}m - showing quiz!`);
        lastQuizMilestone = currentMilestone;
        showRandomQuiz();
    }
}

/**
 * Zobraz√≠ n√°hodn√Ω kv√≠z u≈æivateli
 */
function showRandomQuiz() {
    const quizData = getRandomUncompletedQuiz();
    if (!quizData) {
        console.log('üéØ No more quizzes available - all completed!');
        return;
    }
    
    const { quiz, index } = quizData;
    currentQuiz = { ...quiz, index };
    
    // Zobraz kv√≠z
    document.getElementById('quizQuestion').textContent = quiz.question;
    
    const answersContainer = document.getElementById('quizAnswers');
    answersContainer.innerHTML = '';
    
    quiz.answers.forEach((answer, answerIndex) => {
        const button = document.createElement('div');
        button.className = 'quiz-answer';
        button.textContent = answer;
        button.onclick = () => selectAnswer(answerIndex);
        answersContainer.appendChild(button);
    });
    
    // Aktualizuj progress
    const completed = getCompletedQuizzes();
    const userPos = window.CoreUtils ? window.CoreUtils.getUserPosition() : null;
    const startPos = window.CoreUtils ? window.CoreUtils.getStartPosition() : null;
    
    const distanceFromStart = startPos && userPos ? window.CoreUtils.calculateDistance(
        startPos.lat, startPos.lng,
        userPos.lat, userPos.lng
    ) : 0;
    
    document.getElementById('quizProgress').textContent = 
        `Kv√≠z ${completed.length + 1}/${WINE_QUIZZES.length} ‚Ä¢ Vzd√°lenost: ${distanceFromStart.toFixed(0)}m`;
    
    document.getElementById('wineQuiz').style.display = 'block';
    console.log(`üçá Showing quiz ${index}: ${quiz.question.substring(0, 50)}...`);
}

/**
 * Zpracuje v√Ωbƒõr odpovƒõdi u≈æivatelem
 * @param {number} selectedIndex - Index vybran√© odpovƒõdi
 */
function selectAnswer(selectedIndex) {
    if (!currentQuiz) return;
    
    const answers = document.querySelectorAll('.quiz-answer');
    const explanationDiv = document.getElementById('quizExplanation');
    
    // Oznaƒç odpovƒõdi
    answers.forEach((answer, index) => {
        if (index === currentQuiz.correct) {
            answer.classList.add('correct');
        } else if (index === selectedIndex && index !== currentQuiz.correct) {
            answer.classList.add('incorrect');
        }
        answer.onclick = null; // Deaktivuj klik√°n√≠
    });
    
    // Zobraz vysvƒõtlen√≠
    explanationDiv.textContent = currentQuiz.explanation;
    explanationDiv.style.display = 'block';
    
    // Oznaƒç kv√≠z jako dokonƒçen√Ω
    markQuizCompleted(currentQuiz.index);
    
    console.log(`üçá Answer selected: ${selectedIndex}, correct: ${currentQuiz.correct}`);
}

/**
 * Zav≈ôe aktu√°ln√≠ kv√≠z
 */
function closeQuiz() {
    document.getElementById('wineQuiz').style.display = 'none';
    document.getElementById('quizExplanation').style.display = 'none';
    currentQuiz = null;
}

/**
 * Z√≠sk√° progress kv√≠z≈Ø pro UI
 * @returns {Object} Objekt s completed a total
 */
function getQuizProgress() {
    return {
        completed: getCompletedQuizzes().length,
        total: WINE_QUIZZES.length
    };
}

/**
 * Resetuje v≈°echny kv√≠zy (pro debug)
 */
function resetAllQuizzes() {
    localStorage.removeItem('wineQuizzesCompleted');
    lastQuizMilestone = -1;
    console.log("üîÑ All wine quizzes reset");
}

// === GAMIFIKAƒåN√ç SYST√âM ===

/**
 * Inicializuje gamifikaƒçn√≠ syst√©m pro vina≈ôskou stezku
 */
function initializeGameification() {
    console.log("üéÆ Initializing gamification for vina≈ôsk√° stezka...");
    
    // Ujisti se, ≈æe jsou naƒçten√© v≈°echny konfigurace
    if (typeof SCENE_CONFIG === 'undefined' || typeof ACHIEVEMENTS_CONFIG === 'undefined') {
        console.log("‚è≥ Waiting for gamification config...");
        setTimeout(initializeGameification, 500);
        return;
    }
    
    // Debug v√Ωpis konfigurac√≠ (pouze do konzole)
    console.log("üìä Scene config:", SCENE_CONFIG);
    console.log("üèÜ Achievements config:", ACHIEVEMENTS_CONFIG);
    console.log("üèõÔ∏è Exposition registry:", EXPOSITION_REGISTRY);
    
    // Zkontroluj, ≈æe je expozice registrovan√°
    if (typeof EXPOSITION_REGISTRY !== 'undefined' && EXPOSITION_REGISTRY['stezka_vino']) {
        console.log("‚úÖ Vina≈ôsk√° stezka exposition is registered");
    } else {
        console.warn("‚ö†Ô∏è Vina≈ôsk√° stezka exposition not found in registry");
        // Zkus inicializovat znovu za chv√≠li
        setTimeout(initializeGameification, 1000);
        return;
    }
    
    // Inicializuj time tracking
    if (typeof initializeTimeTracking === 'function') {
        initializeTimeTracking(currentExpositionId, currentSceneId);
        console.log("‚è±Ô∏è Time tracking initialized");
    } else {
        console.error("‚ùå initializeTimeTracking function not found");
    }
    
    gamificationInitialized = true;
    console.log("‚úÖ Gamification initialized successfully for vina≈ôsk√° stezka");
}

/**
 * Zaznamen√°v√° aktivaci vinn√©ho markeru pro gamifikaci
 * @param {string} markerId - ID aktivovan√©ho markeru
 */
function recordWineMarkerActivation(markerId) {
    if (!gamificationInitialized) {
        console.warn("‚ö†Ô∏è Gamification not initialized yet, skipping marker activation");
        return;
    }
    
    console.log(`üçá Recording wine marker activation: ${markerId} in exposition ${currentExpositionId}, scene ${currentSceneId}`);
    
    if (typeof recordMarkerActivation === 'function') {
        recordMarkerActivation(currentExpositionId, currentSceneId, markerId);
    } else {
        console.error("‚ùå recordMarkerActivation function not found");
    }
}

/**
 * Z√≠sk√° status gamifikace
 * @returns {Object} Status objekt
 */
function getGameificationStatus() {
    return {
        initialized: gamificationInitialized,
        expositionId: currentExpositionId,
        sceneId: currentSceneId,
        quizProgress: getQuizProgress()
    };
}

// === TUTORIAL SYST√âM ===

let tutorialInitialized = false;

/**
 * Inicializuje tutorial pro vina≈ôskou stezku
 * @returns {Promise<boolean>} True pokud se tutorial √∫spƒõ≈°nƒõ inicializoval
 */
async function initializeTutorial() {
    if (tutorialInitialized) return true;
    
    try {
        console.log("üéì Loading tutorial config...");
        
        // Dynamicky naƒçti config
        const script = document.createElement('script');
        script.src = '/assets/stezka_vino/tutorial/config_vino.js';
        
        await new Promise((resolve, reject) => {
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
        
        // Poƒçkej chvilku na vykon√°n√≠
        await new Promise(resolve => setTimeout(resolve, 200));
        
        console.log("‚úÖ Tutorial config loaded, creating instance...");
        
        // Vytvo≈ô tutorial instanci
        if (typeof ARTutorial !== 'undefined' && typeof tutorialConfig !== 'undefined') {
            window.arTutorial = ARTutorial.create(tutorialConfig);
            tutorialInitialized = true;
            console.log("‚úÖ Tutorial initialized successfully");
            return true;
        } else {
            console.error("‚ùå Tutorial dependencies not loaded");
            return false;
        }
        
    } catch (error) {
        console.error("‚ùå Tutorial initialization failed:", error);
        return false;
    }
}

/**
 * Spust√≠ tutorial kdy≈æ je v≈°e p≈ôipraven√©
 */
function startTutorialWhenReady() {
    setTimeout(async () => {
        console.log("üéì Starting tutorial initialization...");
        
        const success = await initializeTutorial();
        if (success && window.arTutorial) {
            // Mal√© zpo≈ædƒõn√≠ pro plynul√Ω p≈ôechod
            setTimeout(() => {
                console.log("üéì Starting tutorial...");
                window.arTutorial.start();
            }, 1000);
        }
    }, 3000); // 3 sekundy po naƒçten√≠ A-Frame
}

// === DEBUG FUNKCE ===

/**
 * Debug funkce pro kv√≠zov√Ω syst√©m
 */
function debugQuizSystem() {
    console.log("=== WINE QUIZ SYSTEM DEBUG ===");
    console.log("Total quizzes:", WINE_QUIZZES.length);
    console.log("Completed quizzes:", getCompletedQuizzes());
    console.log("Quiz progress:", getQuizProgress());
    console.log("Current quiz milestone:", lastQuizMilestone);
    console.log("Current quiz:", currentQuiz);
    
    const rawData = localStorage.getItem('wineQuizzesCompleted');
    console.log("Raw localStorage data:", rawData);
    
    console.log("===============================");
    
    return {
        totalQuizzes: WINE_QUIZZES.length,
        completedQuizzes: getCompletedQuizzes(),
        progress: getQuizProgress(),
        currentMilestone: lastQuizMilestone,
        currentQuiz: currentQuiz,
        rawData: rawData
    };
}

/**
 * Debug funkce pro gamifikaci
 */
function debugGameification() {
    console.log("=== WINE GAMIFICATION DEBUG ===");
    console.log("Gamification status:", getGameificationStatus());
    console.log("Tutorial initialized:", tutorialInitialized);
    console.log("Available functions:", {
        recordMarkerActivation: typeof recordMarkerActivation,
        unlockAchievement: typeof unlockAchievement,
        isAchievementUnlocked: typeof isAchievementUnlocked,
        initializeTimeTracking: typeof initializeTimeTracking
    });
    console.log("================================");
    
    return getGameificationStatus();
}

/**
 * Aktivuje p≈ô√≠mo kv√≠zov√Ω achievement (pro testing)
 */
function directActivateWineQuizAchievement() {
    console.log("üéØ DIRECT ACHIEVEMENT ACTIVATION");
    console.log("=================================");
    
    const allQuizzes = Array.from({length: WINE_QUIZZES.length}, (_, i) => i);
    localStorage.setItem('wineQuizzesCompleted', JSON.stringify(allQuizzes));
    
    if (typeof unlockAchievement === 'function') {
        console.log("üèÜ Calling unlockAchievement directly...");
        const result = unlockAchievement('wine_quiz_master');
        console.log("Result:", result);
    } else {
        console.log("‚ùå unlockAchievement not available");
    }
    
    console.log("=================================");
}

/**
 * Kompletn√≠ debug status pro wine app
 */
function debugWineAppStatus() {
    console.log("=== WINE APP COMPLETE STATUS ===");
    const quizDebug = debugQuizSystem();
    const gamificationDebug = debugGameification();
    
    return {
        quiz: quizDebug,
        gamification: gamificationDebug,
        tutorial: tutorialInitialized
    };
}

// === EVENT LISTENERY ===

/**
 * Nastav√≠ event listenery specifick√© pro wine app
 */
function setupWineAppEventListeners() {
    // Quiz close button
    const quizClose = document.getElementById('quizClose');
    if (quizClose) {
        quizClose.addEventListener('click', closeQuiz);
        console.log("üéõÔ∏è Quiz close event listener setup");
    }
    
    // Page visibility API pro pozastaven√≠ gamifikace
    document.addEventListener('visibilitychange', () => {
        if (typeof pauseTimeTracking === 'function' && typeof resumeTimeTracking === 'function') {
            if (document.hidden) {
                pauseTimeTracking();
            } else {
                resumeTimeTracking();
            }
        }
    });
    
    // Finalizace p≈ôi odchodu ze str√°nky
    window.addEventListener('beforeunload', () => {
        if (typeof finalizeTimeTracking === 'function') {
            finalizeTimeTracking(currentExpositionId, currentSceneId);
        }
    });
    
    console.log("‚úÖ Wine app event listeners setup completed");
}

// === EXPORT FUNKC√ç ===

// Pro ES6 moduly
if (typeof module !== 'undefined' && module.exports) {
    // Node.js export
    module.exports = {
        // Kv√≠zov√Ω syst√©m
        getCompletedQuizzes,
        markQuizCompleted,
        getRandomUncompletedQuiz,
        checkDistanceForQuiz,
        showRandomQuiz,
        selectAnswer,
        closeQuiz,
        getQuizProgress,
        resetAllQuizzes,
        
        // Gamifikace
        initializeGameification,
        recordWineMarkerActivation,
        getGameificationStatus,
        
        // Tutorial
        initializeTutorial,
        startTutorialWhenReady,
        
        // Event listeners
        setupWineAppEventListeners,
        
        // Debug
        debugQuizSystem,
        debugGameification,
        debugWineAppStatus,
        directActivateWineQuizAchievement,
        
        // Data export
        WINE_QUIZZES,
        QUIZ_DISTANCE_STEP
    };
} else if (typeof window !== 'undefined') {
    // Browser global export
    window.WineApp = {
        // Kv√≠zov√Ω syst√©m
        getCompletedQuizzes,
        markQuizCompleted,
        getRandomUncompletedQuiz,
        checkDistanceForQuiz,
        showRandomQuiz,
        selectAnswer,
        closeQuiz,
        getQuizProgress,
        resetAllQuizzes,
        
        // Gamifikace
        initializeGameification,
        recordWineMarkerActivation,
        getGameificationStatus,
        
        // Tutorial
        initializeTutorial,
        startTutorialWhenReady,
        
        // Event listeners
        setupWineAppEventListeners,
        
        // Debug
        debugQuizSystem,
        debugGameification,
        debugWineAppStatus,
        directActivateWineQuizAchievement,
        
        // Data export
        WINE_QUIZZES,
        QUIZ_DISTANCE_STEP
    };
}

console.log("‚úÖ Wine App module loaded successfully!");